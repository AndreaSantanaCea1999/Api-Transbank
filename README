# üè¶ Integraci√≥n Transbank + API Banco con Node.js + Express

Implementaci√≥n completa de Transbank Webpay Plus conectada con API del banco, usando conexi√≥n directa a la API REST sin SDK. Basada en el c√≥digo PHP original y configurada para tu entorno espec√≠fico.

## üåü Caracter√≠sticas Principales

- ‚úÖ **Conexi√≥n directa** a API REST de Transbank (sin SDK)
- ‚úÖ **Integraci√≥n con API del banco** en localhost:3001
- ‚úÖ **Base de datos MySQL** para persistencia
- ‚úÖ **Soporte completo** para sandbox y producci√≥n
- ‚úÖ **Flujo completo** de pagos (crear, confirmar, consultar, reembolsar)
- ‚úÖ **Webhooks** para comunicaci√≥n con API del banco
- ‚úÖ **Redirecci√≥n autom√°tica** al frontend configurado
- ‚úÖ **Logs detallados** y manejo de errores robusto
- ‚úÖ **Panel de administraci√≥n** para consultar transacciones
- ‚úÖ **Compatible** con tu configuraci√≥n existente

## üöÄ Instalaci√≥n y Configuraci√≥n

### 1. Instalar dependencias
```bash
git clone [tu-repositorio]
cd transbank-integration
npm install
```

### 2. Configurar variables de entorno
```bash
# Copia el archivo de ejemplo
cp .env.example .env

# Edita las variables seg√∫n tu configuraci√≥n
nano .env
```

### 3. Configurar base de datos
```bash
# Ejecutar script SQL en tu base de datos MySQL
mysql -u administrador -p ferremas_complete < scripts/setup-database.sql

# O usar el script de Node.js
npm run db:setup
```

### 4. Iniciar servidor
```bash
# Desarrollo
npm run dev

# Producci√≥n
npm start
```

## üìÅ Estructura del Proyecto

```
transbank-integration/
‚îú‚îÄ‚îÄ app.js                      # Aplicaci√≥n principal Express
‚îú‚îÄ‚îÄ services/
‚îÇ   ‚îî‚îÄ‚îÄ transbank.js           # Servicio para API de Transbank + Banco
‚îú‚îÄ‚îÄ routes/
‚îÇ   ‚îî‚îÄ‚îÄ transbank.js           # Rutas del flujo de pagos
‚îú‚îÄ‚îÄ scripts/
‚îÇ   ‚îî‚îÄ‚îÄ setup-database.sql     # Script para configurar BD
‚îú‚îÄ‚îÄ test/
‚îÇ   ‚îî‚îÄ‚îÄ test-transbank.js      # Ejemplos y tests
‚îú‚îÄ‚îÄ .env.example               # Variables de entorno de ejemplo
‚îú‚îÄ‚îÄ package.json
‚îî‚îÄ‚îÄ README.md
```

## üîß API Endpoints

### üÜï Crear Transacci√≥n
```http
POST /api/transbank/create
Content-Type: application/json

{
  "amount": 15000,
  "buyOrder": "123456",     // opcional
  "sessionId": "654321",    // opcional  
  "userId": 1               // opcional
}
```

**Respuesta:**
```json
{
  "success": true,
  "message": "Transacci√≥n creada exitosamente",
  "data": {
    "token": "01ab23cd4ef5...",
    "url": "https://webpay3gint.transbank.cl/webpayserver/initTransaction",
    "buyOrder": "123456",
    "sessionId": "654321",
    "amount": 15000,
    "redirectUrl": "http://localhost:3003/api/transbank/redirect/01ab23cd4ef5..."
  }
}
```

### üìÑ Crear Transacci√≥n Simple (Compatible con PHP)
```http
GET /api/transbank
```
Crea una transacci√≥n con valores por defecto (monto: $15.000).

### üîÑ Redirigir a Pago
```http
GET /api/transbank/redirect/:token
```
Genera p√°gina HTML que redirige autom√°ticamente a Transbank con interfaz mejorada.

### ‚úÖ Confirmar Resultado (Webhook Transbank)
```http
POST /api/transbank/result
Content-Type: application/x-www-form-urlencoded

token_ws={token}
```
Este endpoint es llamado por Transbank. Redirige autom√°ticamente al frontend.

### üìä Consultar Estado
```http
GET /api/transbank/status/:token
```

### üí∞ Realizar Reembolso
```http
POST /api/transbank/refund/:token
Content-Type: application/json

{
  "amount": 15000
}
```

### üìã Obtener Informaci√≥n de Transacci√≥n
```http
GET /api/transbank/transaction/:token
```

### üîó Webhook del Banco
```http
POST /api/transbank/webhook/bank
Content-Type: application/json

{
  "action": "validate-payment",
  "token": "abc123",
  "data": { "approved": true }
}
```

### üë®‚Äçüíº Admin: Listar Transacciones
```http
GET /api/transbank/admin/transactions?page=1&limit=20&status=authorized
```

## üîÑ Flujo Completo de Pago

```mermaid
sequenceDiagram
    participant F as Frontend
    participant A as API Node.js
    participant B as API Banco
    participant T as Transbank
    participant D as Base de Datos

    F->>A: POST /api/transbank/create
    A->>B: Validar transacci√≥n
    B-->>A: Aprobaci√≥n
    A->>T: Crear transacci√≥n
    T-->>A: Token + URL
    A->>D: Guardar transacci√≥n
    A-->>F: Token + redirectUrl
    
    F->>A: GET /redirect/:token
    A-->>F: P√°gina de redirecci√≥n
    F->>T: Formulario de pago
    
    Note over T: Usuario realiza pago
    
    T->>A: POST /result (webhook)
    A->>T: Confirmar transacci√≥n
    T-->>A: Resultado final
    A->>B: Notificar resultado
    A->>D: Actualizar estado
    A-->>F: Redirigir con resultado
```

## üîó Integraci√≥n con API del Banco

### Configuraci√≥n
El servicio se conecta autom√°ticamente con tu API del banco en `localhost:3001`. Las siguientes acciones se notifican:

- ‚úÖ **transaction-created**: Nueva transacci√≥n creada
- ‚úÖ **transaction-confirmed**: Pago confirmado
- ‚úÖ **transaction-status-checked**: Estado consultado
- ‚úÖ **transaction-refunded**: Reembolso procesado

### Endpoints esperados en API Banco
```javascript
// POST http://localhost:3001/transbank/transaction-created
// POST http://localhost:3001/transbank/transaction-confirmed
// POST http://localhost:3001/transbank/transaction-status-checked  
// POST http://localhost:3001/transbank/transaction-refunded
// POST http://localhost:3001/validate-transaction
```

## üíæ Base de Datos

### Tabla Principal: `transbank_transactions`
```sql
- id, token, buy_order, session_id, amount
- status (created, confirmed, authorized, failed, refunded)
- transbank_url, response_code, authorization_code
- card_detail (JSON), raw_response (JSON)
- refund_amount, refund_date
- bank_validation, bank_balance_updated
- user_id, created_at, updated_at
```

### Tabla de Logs: `transbank_api_logs`
```sql
- transaction_token, api_type, action, method, url
- request_data (JSON), response_data (JSON)
- success, error_message, execution_time_ms
```

### Vista de Estad√≠sticas: `transbank_stats`
Estad√≠sticas diarias de transacciones de los √∫ltimos 30 d√≠as.

## üåê Integraci√≥n con Frontend

### Ejemplo con JavaScript/Fetch:
```javascript
// 1. Crear transacci√≥n
async function iniciarPago(amount = 15000, userId = null) {
    const response = await fetch('/api/transbank/create', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ amount, userId })
    });
    
    const data = await response.json();
    
    if (data.success) {
        // 2. Redirigir al formulario de pago
        window.location.href = data.data.redirectUrl;
    }
}

// 3. Manejar resultado en p√°gina de retorno
// URL: http://localhost:3004/payment-result?token=...&status=...&success=true
const urlParams = new URLSearchParams(window.location.search);
const paymentSuccess = urlParams.get('success') === 'true';
const amount = urlParams.get('amount');
const authCode = urlParams.get('authCode');
```

### Ejemplo con React:
```jsx
function PagoComponent() {
    const [loading, setLoading] = useState(false);
    
    const handlePago = async (amount) => {
        setLoading(true);
        try {
            const response = await fetch('/api/transbank/create', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    amount, 
                    userId: currentUser.id 
                })
            });
            
            const data = await response.json();
            
            if (data.success) {
                // Redirigir al formulario de pago
                window.location.href = data.data.redirectUrl;
            } else {
                alert('Error al crear transacci√≥n: ' + data.message);
            }
        } catch (error) {
            console.error('Error:', error);
        } finally {
            setLoading(false);
        }
    };
    
    return (
        <button 
            onClick={() => handlePago(25000)} 
            disabled={loading}
            className="btn-pagar"
        >
            {loading ? 'Procesando...' : 'Pagar $25.000'}
        </button>
    );
}

// Componente para manejar resultado del pago
function PaymentResult() {
    const [searchParams] = useSearchParams();
    const success = searchParams.get('success') === 'true';
    const amount = searchParams.get('amount');
    const token = searchParams.get('token');
    
    return (
        <div className={`payment-result ${success ? 'success' : 'error'}`}>
            {success ? (
                <div>
                    <h2>‚úÖ ¬°Pago Exitoso!</h2>
                    <p>Monto: ${parseInt(amount).toLocaleString('es-CL')}</p>
                    <p>Token: {token}</p>
                </div>
            ) : (
                <div>
                    <h2>‚ùå Pago Fallido</h2>
                    <p>Intenta nuevamente</p>
                </div>
            )}
        </div>
    );
}
```

## ‚öôÔ∏è Configuraci√≥n para Producci√≥n

### 1. Variables de entorno
```bash
NODE_ENV=production
WEBPAY_API_KEY_ID=tu_api_key_id_real_produccion
WEBPAY_API_KEY_SECRET=tu_api_key_secret_real_produccion
FRONTEND_URL=https://tu-dominio.com
BANK_API_URL=https://tu-api-banco-produccion.com
DB_HOST=tu-servidor-mysql-produccion
```

### 2. HTTPS obligatorio
```bash
# Usar proxy reverso (nginx/apache) o certificado SSL
# Transbank requiere HTTPS en producci√≥n
```

### 3. Optimizaciones de base de datos
```sql
-- Crear √≠ndices adicionales para mejor rendimiento
CREATE INDEX idx_created_status ON transbank_transactions(created_at, status);
CREATE INDEX idx_user_amount ON transbank_transactions(user_id, amount);

-- Configurar limpieza autom√°tica de logs antiguos
-- Ejecutar semanalmente:
CALL CleanOldTransactions(90);
```

## üß™ Testing y Desarrollo

### Ejecutar tests
```bash
npm test
```

### Credenciales de testing (sandbox)
- **Tarjeta:** `4051885600446623`
- **A√±o:** Cualquier a√±o futuro (ej: 2025)
- **CVV:** `123`

### Endpoints de desarrollo
```bash
# Health check
curl http://localhost:3003/health

# Crear transacci√≥n de prueba
curl http://localhost:3003/api/transbank

# Ver todas las transacciones
curl http://localhost:3003/api/transbank/admin/transactions
```

## üîí Seguridad y Mejores Pr√°cticas

### ‚úÖ Implementado
- Variables de entorno para credenciales
- Validaci√≥n de datos de entrada
- Logs de auditor√≠a completos
- Timeouts en peticiones HTTP
- Manejo de errores robusto
- CORS configurado correctamente

### üîÑ Recomendaciones adicionales
- Usar HTTPS en producci√≥n
- Implementar rate limiting
- Validar tokens con TTL
- Encriptar datos sensibles en BD
- Monitorear logs de transacciones
- Configurar alertas para fallos

## üìä Estados de Transacci√≥n

| Estado | Descripci√≥n |
|--------|-------------|
| `created` | Transacci√≥n creada, pendiente de pago |
| `confirmed` | Pago confirmado por Transbank |
| `authorized` | Pago autorizado exitosamente |
| `failed` | Pago fallido o rechazado |
| `refunded` | Transacci√≥n reembolsada |
| `cancelled` | Transacci√≥n cancelada |

## üõ†Ô∏è Comandos √ötiles

```bash
# Desarrollo
npm run dev              # Iniciar con nodemon
npm start               # Iniciar en producci√≥n
npm test                # Ejecutar tests
npm run db:setup        # Configurar base de datos

# Base de datos
mysql -u administrador -p ferremas_complete < scripts/setup-database.sql

# Logs en tiempo real
tail -f logs/transbank.log

# Verificar configuraci√≥n
curl http://localhost:3003/health
```

## üìû Soporte y Debugging

### Variables de debug
```bash
# Activar logs detallados
TRANSBANK_DEBUG=true
LOG_LEVEL=debug
```

### Logs importantes
- Todas las peticiones a Transbank se registran en `transbank_api_logs`
- Estados de transacciones se actualizan autom√°ticamente
- Errores se loggean con stack trace completo

### Problemas comunes
1. **Error de credenciales**: Verificar `WEBPAY_API_KEY_ID` y `WEBPAY_API_KEY_SECRET`
2. **Timeout de BD**: Aumentar `connectionLimit` en pool MySQL
3. **CORS errors**: Verificar `FRONTEND_URL` en configuraci√≥n
4. **API Banco no responde**: Verificar `BANK_API_URL` y logs

---

## üéØ Pr√≥ximos Pasos

Una vez que tengas todo funcionando:

1. **Personalizar montos** seg√∫n tu aplicaci√≥n
2. **Integrar con sistema de usuarios** existente
3. **Configurar notificaciones** por email/SMS
4. **Implementar dashboard** de administraci√≥n
5. **Configurar monitoreo** de transacciones
6. **Preparar para producci√≥n** con certificados SSL

¬°Tu integraci√≥n de Transbank est√° lista para usar! üöÄ