# 🏦 FERREMAS - Integración Transbank Webpay Plus

<div align="center">

![Node.js](https://img.shields.io/badge/Node.js-18+-green.svg)
![Express](https://img.shields.io/badge/Express-4.21+-blue.svg)
![MySQL](https://img.shields.io/badge/MySQL-8.0+-orange.svg)
![Transbank](https://img.shields.io/badge/Transbank-Webpay%20Plus-red.svg)
![License](https://img.shields.io/badge/License-MIT-yellow.svg)

*Integración completa con Transbank Webpay Plus para el sistema FERREMAS*

[Instalación](#-instalación) • [Configuración](#-configuración) • [API Docs](#-documentación-de-api) • [Testing](#-testing) • [Producción](#-producción)

</div>

---

## 📋 Tabla de Contenidos

- [🚀 Características](#-características)
- [⚙️ Instalación](#️-instalación)
- [🔧 Configuración](#-configuración)
- [📁 Estructura del Proyecto](#-estructura-del-proyecto)
- [🌐 Documentación de API](#-documentación-de-api)
- [🔄 Flujo de Transacciones](#-flujo-de-transacciones)
- [💾 Base de Datos](#-base-de-datos)
- [🧪 Testing](#-testing)
- [🚀 Producción](#-producción)
- [🛠️ Troubleshooting](#️-troubleshooting)
- [📞 Soporte](#-soporte)

---

## 🚀 Características

### ✅ **Integración Completa con Transbank**
- Conexión directa con API REST Webpay Plus (sin SDK)
- Soporte para ambientes de integración y producción
- Manejo completo del flujo de pagos (crear, confirmar, consultar, reembolsar)
- Validación automática de transacciones

### ✅ **Sistema Integral FERREMAS**
- **API Inventario** (Puerto 3000): Gestión de productos y stock
- **API Banco** (Puerto 3001): Pagos y validaciones bancarias
- **API Transbank** (Puerto 3003): Orquestador de transacciones
- Sincronización automática entre todos los sistemas

### ✅ **Características Técnicas**
- Base de datos MySQL con auditoría completa
- Logs detallados de todas las operaciones
- Middleware de seguridad avanzado
- Rate limiting y validación de entrada
- CORS configurado para múltiples orígenes
- Manejo robusto de errores

### ✅ **Herramientas de Desarrollo**
- Suite de pruebas automatizada
- Colección Postman incluida
- Scripts de migración y setup
- Health checks para todas las APIs
- Panel de administración para transacciones

---

## ⚙️ Instalación

### **Prerrequisitos**
- **Node.js** 18.0.0 o superior
- **MySQL** 8.0 o superior
- **npm** 8.0.0 o superior

### **1. Clonar el Repositorio**
```bash
git clone https://github.com/tu-usuario/ferremas-transbank.git
cd ferremas-transbank
```

### **2. Instalar Dependencias**
```bash
npm install
```

### **3. Configurar Base de Datos**
```bash
# Crear la base de datos
mysql -u root -p -e "CREATE DATABASE ferremas_complete CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;"

# Ejecutar scripts de configuración
mysql -u administrador -p ferremas_complete < scripts/setup-database.sql
```

### **4. Configurar Variables de Entorno**
```bash
# Copiar archivo de ejemplo
cp .env.example .env

# Editar configuración
nano .env
```

### **5. Iniciar el Servidor**
```bash
# Desarrollo
npm run dev

# Producción
npm start
```

---

## 🔧 Configuración

### **Variables de Entorno Críticas**

```bash
# ============================================
# CONFIGURACIÓN WEBPAY PLUS - FERREMAS
# ============================================

# Ambiente Webpay
WEBPAY_ENV=integration  # o 'production' para producción

# Credenciales Transbank (Integración)
WEBPAY_API_KEY_ID=597055555532
WEBPAY_API_KEY_SECRET=579B532A7440BB0C9079DED94D31EA1615BACEB56610332264630D42D0A36B1C

# Base de datos
DB_HOST=localhost
DB_USER=administrador
DB_PASSWORD=yR!9uL2@pX
DB_NAME=ferremas_complete
DB_PORT=3306

# URLs de APIs internas
API_INVENTARIO_URL=http://localhost:3000/api
API_BANCO_URL=http://localhost:3001/api/v1

# Puerto de la API
PORT=3003

# CORS y orígenes permitidos
ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001,http://localhost:3003
```

### **Configuración para Producción**

⚠️ **Para producción, reemplazar con credenciales reales:**

```bash
WEBPAY_ENV=production
WEBPAY_API_KEY_ID=tu_api_key_id_real
WEBPAY_API_KEY_SECRET=tu_api_key_secret_real
```

---

## 📁 Estructura del Proyecto

```
ferremas-transbank/
├── 📄 app.js                          # Aplicación principal Express
├── 📂 src/
│   ├── 📂 controllers/
│   │   ├── transbankController.js      # Controlador principal Transbank
│   │   └── webpayController.js         # Controlador Webpay Plus real
│   ├── 📂 models/
│   │   ├── Transaccion.js              # Modelo de transacciones
│   │   ├── TransbankLog.js             # Modelo de logs
│   │   └── index.js                    # Configuración Sequelize
│   ├── 📂 routes/
│   │   ├── transbankRoutes.js          # Rutas principales
│   │   └── webpayRoutes.js             # Rutas Webpay real
│   ├── 📂 middlewares/
│   │   └── security.js                 # Middleware de seguridad
│   ├── 📂 utils/
│   │   └── webpayHelpers.js            # Utilidades Webpay
│   └── 📂 config/
│       ├── database.js                 # Configuración BD
│       └── webpay.js                   # Configuración Webpay
├── 📂 scripts/
│   ├── setup-database.sql              # Script setup BD
│   ├── test-integration.js             # Tests integración
│   ├── test-webpay-integration.js      # Tests Webpay
│   └── migrate-to-real-webpay.js       # Script migración
├── 📂 docs/
│   └── FERREMAS_API_Collection.postman.yaml  # Colección Postman
├── 📄 package.json
├── 📄 .env.example
└── 📄 README.md
```

---

## 🌐 Documentación de API

### **Base URL**
```
http://localhost:3003/api/transbank
```

### **🏥 Health Checks**

#### **Verificar Estado General**
```http
GET /api/transbank/health
```

**Respuesta:**
```json
{
  "success": true,
  "message": "Todas las conexiones funcionando",
  "status": "API Transbank funcionando",
  "version": "1.0.0",
  "conexiones": {
    "inventario": true,
    "banco": true,
    "database": true,
    "timestamp": "2025-06-28T10:30:00.000Z"
  }
}
```

### **💳 Gestión de Transacciones**

#### **Crear Nueva Transacción**
```http
POST /api/transbank/iniciar
Content-Type: application/json
```

**Body:**
```json
{
  "clienteId": 1,
  "ordenCompra": "ORD-1234567890",
  "monto": 75000,
  "divisa": "CLP",
  "detalles": [
    {
      "ID_Producto": 1,
      "Cantidad": 2,
      "Precio_Unitario": 25000
    },
    {
      "ID_Producto": 2,
      "Cantidad": 1,
      "Precio_Unitario": 25000
    }
  ]
}
```

**Respuesta Exitosa:**
```json
{
  "success": true,
  "message": "Transacción creada exitosamente",
  "transaccion": {
    "id": 123,
    "cliente_id": 1,
    "orden_compra": "ORD-1234567890",
    "monto": 75000,
    "estado": "PENDIENTE",
    "token": "e9d555262db0f989e49d724b4db0bd681def....",
    "fecha_creacion": "2025-06-28T10:30:00.000Z"
  }
}
```

#### **Confirmar Transacción**
```http
POST /api/transbank/confirmar
Content-Type: application/json
```

**Body:**
```json
{
  "id_transaccion": 123
}
```

**Respuesta:**
```json
{
  "success": true,
  "message": "Transacción confirmada exitosamente",
  "transaccion": {
    "id": 123,
    "estado": "APROBADO",
    "fecha_actualizacion": "2025-06-28T10:35:00.000Z"
  },
  "data": {
    "pago_registrado": true,
    "pedido_creado": true,
    "inventario_actualizado": true
  }
}
```

#### **Consultar Estado de Transacción**
```http
GET /api/transbank/estado/{id_transaccion}
```

**Respuesta:**
```json
{
  "success": true,
  "transaccion": {
    "id": 123,
    "cliente_id": 1,
    "orden_compra": "ORD-1234567890",
    "monto": 75000,
    "estado": "APROBADO",
    "detalles": [...],
    "fecha_creacion": "2025-06-28T10:30:00.000Z",
    "fecha_actualizacion": "2025-06-28T10:35:00.000Z"
  }
}
```

#### **Listar Transacciones**
```http
GET /api/transbank/listar?limit=10&estado=APROBADO&cliente_id=1
```

### **🔄 Webpay Plus Real**

#### **Crear Transacción Webpay**
```http
POST /api/webpay/create
Content-Type: application/json
```

**Body:**
```json
{
  "clienteId": 1,
  "productos": [
    {"ID_Producto": 1, "Cantidad": 2},
    {"ID_Producto": 2, "Cantidad": 1}
  ],
  "returnUrl": "https://mi-sitio.com/webpay/return"
}
```

**Respuesta:**
```json
{
  "success": true,
  "message": "Transacción creada exitosamente en Transbank",
  "data": {
    "token": "e9d555262db0f989e49d724b4db0bd681def....",
    "url": "https://webpay3gint.transbank.cl/webpayserver/initTransaction",
    "transaccion_id": 123,
    "amount": 50000
  },
  "instructions": {
    "next_step": "Redirigir usuario a result.data.url con form POST",
    "form_data": {
      "token_ws": "e9d555262db0f989e49d724b4db0bd681def...."
    }
  }
}
```

#### **Confirmar Transacción Webpay**
```http
PUT /api/webpay/confirm/{token}
```

### **📊 Administración y Consultas**

#### **Obtener Estadísticas**
```http
GET /api/transbank/stats
```

#### **Consultar Logs**
```http
GET /api/transbank/logs?limit=20&accion=CONFIRMAR_TRANSACCION
```

---

## 🔄 Flujo de Transacciones

### **Flujo Completo de Pago**

```mermaid
sequenceDiagram
    participant C as Cliente
    participant F as Frontend
    participant T as API Transbank
    participant I as API Inventario
    participant B as API Banco
    participant W as Webpay Plus
    participant D as Base de Datos

    C->>F: Iniciar compra
    F->>T: POST /api/transbank/iniciar
    T->>I: Validar productos y stock
    I-->>T: Stock disponible
    T->>D: Crear transacción
    T->>W: Crear transacción Webpay
    W-->>T: Token + URL
    T-->>F: Token para pago
    
    F->>W: Redirigir a Webpay
    C->>W: Realizar pago
    W->>T: Webhook confirmación
    T->>W: Confirmar transacción
    W-->>T: Resultado final
    
    alt Pago Exitoso
        T->>B: Registrar pago
        T->>I: Actualizar inventario
        T->>D: Actualizar estado
        T-->>F: Confirmación exitosa
    else Pago Fallido
        T->>D: Marcar como fallido
        T-->>F: Error de pago
    end
```

### **Estados de Transacción**

| Estado | Descripción | Es Final |
|--------|-------------|----------|
| `PENDIENTE` | Transacción creada, esperando pago | ❌ |
| `PROCESANDO` | Pago en proceso de validación | ❌ |
| `APROBADO` | Pago aprobado exitosamente | ✅ |
| `RECHAZADO` | Pago rechazado o fallido | ✅ |
| `CANCELADO` | Transacción cancelada | ✅ |
| `REEMBOLSADO` | Transacción reembolsada | ✅ |
| `EXPIRADO` | Transacción expirada por tiempo | ✅ |

---

## 💾 Base de Datos

### **Tabla Principal: `transacciones`**
```sql
CREATE TABLE transacciones (
    id INT AUTO_INCREMENT PRIMARY KEY,
    ID_Cliente INT NULL,
    ordenCompra VARCHAR(100) NULL,
    monto DECIMAL(10,2) NULL,
    token VARCHAR(255) NULL,
    estado VARCHAR(50) DEFAULT 'PENDIENTE',
    detalles LONGTEXT NULL,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);
```

### **Tabla de Logs: `transbank_logs`**
```sql
CREATE TABLE transbank_logs (
    ID_Log INT AUTO_INCREMENT PRIMARY KEY,
    ID_Transaccion INT NULL,
    Accion VARCHAR(50) NOT NULL,
    Descripcion VARCHAR(500) NULL,
    Datos_Entrada TEXT NULL,
    Datos_Salida TEXT NULL,
    Codigo_Respuesta VARCHAR(10) DEFAULT '200',
    Mensaje_Error TEXT NULL,
    IP_Origen VARCHAR(45) NULL,
    User_Agent TEXT NULL,
    Duracion_MS INT DEFAULT 0,
    Fecha_Creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

---

## 🧪 Testing

### **Ejecutar Suite Completa de Pruebas**
```bash
# Pruebas de integración completa
node scripts/test-integration.js

# Pruebas específicas de Webpay
node scripts/test-webpay-integration.js

# Prueba rápida
node scripts/test-webpay-integration.js --quick
```

### **Health Checks Manuales**
```bash
# Verificar APIs
curl http://localhost:3003/api/transbank/health
curl http://localhost:3003/api/webpay/health

# Crear transacción de prueba
curl -X POST http://localhost:3003/api/webpay/test-create
```

### **Datos de Prueba (Ambiente Integración)**
- **Tarjeta de Prueba:** `4051885600446623`
- **CVV:** `123`
- **Fecha:** Cualquier fecha futura (ej: `12/25`)
- **Resultado:** Transacción aprobada

### **Colección Postman**
Importa la colección incluida en `docs/FERREMAS_API_Collection.postman.yaml` para probar todos los endpoints.

**Flujo de prueba recomendado:**
1. Health Checks → Verificar APIs
2. Listar Productos → Consultar inventario
3. Crear Transacción → Flujo completo
4. Confirmar Transacción → Procesar pago
5. Verificar Estado → Validar resultado

---

## 🚀 Producción

### **1. Configuración de Ambiente**
```bash
# Variables críticas para producción
NODE_ENV=production
WEBPAY_ENV=production

# Credenciales reales de Transbank
WEBPAY_API_KEY_ID=tu_api_key_id_real
WEBPAY_API_KEY_SECRET=tu_api_key_secret_real

# URLs de producción
API_INVENTARIO_URL=https://tu-api-inventario-prod.com
API_BANCO_URL=https://tu-api-banco-prod.com
```

### **2. Requisitos de Infraestructura**
- **HTTPS obligatorio** (Transbank requiere SSL)
- **MySQL 8.0+** con configuración optimizada
- **Node.js 18+** con PM2 para gestión de procesos
- **Nginx/Apache** como proxy reverso
- **Monitoring** y alertas configuradas

### **3. Optimizaciones de Base de Datos**
```sql
-- Índices para mejor rendimiento
CREATE INDEX idx_transacciones_estado ON transacciones(estado);
CREATE INDEX idx_transacciones_fecha ON transacciones(createdAt);
CREATE INDEX idx_logs_transaccion ON transbank_logs(ID_Transaccion);
CREATE INDEX idx_logs_fecha ON transbank_logs(Fecha_Creacion);

-- Configurar limpieza automática
-- Ejecutar semanalmente
DELETE FROM transbank_logs WHERE Fecha_Creacion < DATE_SUB(NOW(), INTERVAL 90 DAY);
```

### **4. Comandos de Despliegue**
```bash
# Instalar dependencias de producción
npm ci --only=production

# Iniciar con PM2
pm2 start app.js --name "ferremas-transbank"
pm2 startup
pm2 save

# Logs en tiempo real
pm2 logs ferremas-transbank
```

---

## 🛠️ Troubleshooting

### **Problemas Comunes**

#### **❌ Error: "ECONNREFUSED" al conectar con APIs**
```bash
# Verificar que las APIs estén corriendo
curl http://localhost:3000/api/productos  # API Inventario
curl http://localhost:3001/api/v1/        # API Banco

# Verificar variables de entorno
echo $API_INVENTARIO_URL
echo $API_BANCO_URL
```

#### **❌ Error: "ER_ACCESS_DENIED_ERROR" Base de Datos**
```bash
# Verificar credenciales
mysql -u administrador -p -h localhost

# Verificar permisos
GRANT ALL PRIVILEGES ON ferremas_complete.* TO 'administrador'@'localhost';
FLUSH PRIVILEGES;
```

#### **❌ Error: "Invalid API Key" Transbank**
```bash
# Verificar credenciales en .env
echo $WEBPAY_API_KEY_ID
echo $WEBPAY_API_KEY_SECRET

# Para producción, usar credenciales reales
# Para testing, usar: 597055555532 y 579B532A7440BB0C9079DED94D31EA1615BACEB56610332264630D42D0A36B1C
```

#### **❌ Error: "CORS Policy" Frontend**
```bash
# Verificar configuración CORS
echo $ALLOWED_ORIGINS

# Debe incluir la URL del frontend
ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001,http://localhost:3003,http://localhost:3004
```

### **Logs y Debugging**
```bash
# Logs detallados
TRANSBANK_DEBUG=true
LOG_LEVEL=debug

# Ver logs de base de datos
SELECT * FROM transbank_logs ORDER BY Fecha_Creacion DESC LIMIT 10;

# Ver transacciones recientes
SELECT * FROM transacciones ORDER BY createdAt DESC LIMIT 10;
```

---

## 📞 Soporte

### **Recursos de Desarrollo**
- **Documentación Oficial Transbank:** [https://www.transbankdevelopers.cl/](https://www.transbankdevelopers.cl/)
- **API REST Webpay Plus:** [https://www.transbankdevelopers.cl/documentacion/webpay-plus](https://www.transbankdevelopers.cl/documentacion/webpay-plus)
- **Postman Collection:** `docs/FERREMAS_API_Collection.postman.yaml`

### **Scripts de Utilidad**
```bash
# Verificar configuración completa
node scripts/verify-setup.js

# Migrar a Webpay real
node scripts/migrate-to-real-webpay.js

# Setup automático completo
node scripts/setup-webpay-complete.js
```

### **Contacto y Contribuciones**
- **Issues:** Reportar problemas en el repositorio
- **Wiki:** Documentación extendida disponible
- **Slack/Teams:** Canal de desarrollo interno

### **Información de Versión**
- **Versión Actual:** 2.0.0
- **Node.js:** 18.0.0+
- **Express:** 4.21.2
- **MySQL:** 8.0+
- **Última Actualización:** Junio 2025

---

<div align="center">

**🏪 FERREMAS - Sistema de Pagos Transbank**

*Desarrollado con ❤️ para el ecosistema FERREMAS*

![FERREMAS](https://img.shields.io/badge/FERREMAS-Transbank%20Integration-blue.svg)

</div>
